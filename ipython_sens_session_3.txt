
In [59]: import torch

In [60]: a = torch.tensor(1.0, requires_grad=True)

In [61]: a
Out[61]: tensor(1., requires_grad=True)

In [62]: b = torch.tensor(2.0)

In [63]: b
Out[63]: tensor(2.)

In [64]: out = a * b

In [65]: out
Out[65]: tensor(2., grad_fn=<MulBackward0>)

In [66]: out.backward()

In [67]: out
Out[67]: tensor(2., grad_fn=<MulBackward0>)

In [68]:

In [68]: a
Out[68]: tensor(1., requires_grad=True)

In [69]: b
Out[69]: tensor(2.)

In [70]: out.backward(torch.tensor(1))
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-70-2ea6f56777be> in <module>
----> 1 out.backward(torch.tensor(1))

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/tensor.py in backward(self, gradient, retain_graph, create_graph)
    100                 products. Defaults to ``False``.
    101         """
--> 102         torch.autograd.backward(self, gradient, retain_graph, create_graph)
    103
    104     def register_hook(self, hook):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/autograd/__init__.py in backward(tensors, grad_tensors, retain_graph, create_graph, grad_variables)
     88     Variable._execution_engine.run_backward(
     89         tensors, grad_tensors, retain_graph, create_graph,
---> 90         allow_unreachable=True)  # allow_unreachable flag
     91
     92

RuntimeError: invalid gradient at index 0 - expected type torch.FloatTensor but got torch.LongTensor

In [71]: out.backward(torch.tensor(1.))
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-71-ddf67fd4dcd8> in <module>
----> 1 out.backward(torch.tensor(1.))

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/tensor.py in backward(self, gradient, retain_graph, create_graph)
    100                 products. Defaults to ``False``.
    101         """
--> 102         torch.autograd.backward(self, gradient, retain_graph, create_graph)
    103
    104     def register_hook(self, hook):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/autograd/__init__.py in backward(tensors, grad_tensors, retain_graph, create_graph, grad_variables)
     88     Variable._execution_engine.run_backward(
     89         tensors, grad_tensors, retain_graph, create_graph,
---> 90         allow_unreachable=True)  # allow_unreachable flag
     91
     92

RuntimeError: Trying to backward through the graph a second time, but the buffers have already been freed. Specify retain_graph=True when calling backward the first time.

In [72]: out = a * b

In [73]: out.backward(torch.tensor(1.))

In [74]: out
Out[74]: tensor(2., grad_fn=<MulBackward0>)

In [75]: a
Out[75]: tensor(1., requires_grad=True)

In [76]: b
Out[76]: tensor(2.)

In [77]: a.grad
Out[77]: tensor(4.)

In [78]: a.zero_grad_()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-78-c7d10962d3b7> in <module>
----> 1 a.zero_grad_()

AttributeError: 'Tensor' object has no attribute 'zero_grad_'

In [79]: a.zero_grad()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-79-954a504365d9> in <module>
----> 1 a.zero_grad()

AttributeError: 'Tensor' object has no attribute 'zero_grad'

In [80]: out.zero_grad()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-80-6db05ac2b37e> in <module>
----> 1 out.zero_grad()

AttributeError: 'Tensor' object has no attribute 'zero_grad'

In [81]: c = torch.tensor(2., requires_grad=True)

In [82]: d = torch.tensor(3.)

In [83]: f = c * d

In [84]: f
Out[84]: tensor(6., grad_fn=<MulBackward0>)

In [85]: f.backward(torch.tensor(1.))

In [86]: f
Out[86]: tensor(6., grad_fn=<MulBackward0>)

In [87]: c
Out[87]: tensor(2., requires_grad=True)

In [88]: d
Out[88]: tensor(3.)

In [89]: c.grad, d.grad
Out[89]: (tensor(3.), None)

In [90]: c.zero_grad()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-90-d6e33072a6b3> in <module>
----> 1 c.zero_grad()

AttributeError: 'Tensor' object has no attribute 'zero_grad'

In [91]: c.grad.zero_()
Out[91]: tensor(0.)

In [92]: c.grad
Out[92]: tensor(0.)

In [93]: f.backward(torch.tensor(2.))
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-93-d18f8309dc3e> in <module>
----> 1 f.backward(torch.tensor(2.))

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/tensor.py in backward(self, gradient, retain_graph, create_graph)
    100                 products. Defaults to ``False``.
    101         """
--> 102         torch.autograd.backward(self, gradient, retain_graph, create_graph)
    103
    104     def register_hook(self, hook):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/torch/autograd/__init__.py in backward(tensors, grad_tensors, retain_graph, create_graph, grad_variables)
     88     Variable._execution_engine.run_backward(
     89         tensors, grad_tensors, retain_graph, create_graph,
---> 90         allow_unreachable=True)  # allow_unreachable flag
     91
     92

RuntimeError: Trying to backward through the graph a second time, but the buffers have already been freed. Specify retain_graph=True when calling backward the first time.

In [94]: g = d * c

In [95]: g.backward(torch.tensor(2.))

In [96]: g.grad

In [97]: d.grad

In [98]: c.grad
Out[98]: tensor(6.)

In [99]: sens
Out[99]: tensor([ 1.3574,  3.2960,  1.9775,  ..., 92.7390, 71.9527, 91.7133])

In [100]: len([x for x in sens if x < 0.001])
Out[100]: 1196871

In [101]: len([x for x in sens if x < 0.01])
Out[101]: 1205752

In [102]: sens.max()
Out[102]: tensor(3221.0061)

In [103]: sens.min()
Out[103]: tensor(0.)

In [104]: sens.mean()
Out[104]: tensor(0.8553)

In [105]: plt.close()

In [106]: sens[sens > 100] = 100

In [107]: fig = plt.figure()

In [108]: plt.plot(np.arange(len(sens)), sens)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-108-69ddea42c9de> in <module>
----> 1 plt.plot(np.arange(len(sens)), sens)

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/pyplot.py in plot(scalex, scaley, data, *args, **kwargs)
   2809     return gca().plot(
   2810         *args, scalex=scalex, scaley=scaley, **({"data": data} if data
-> 2811         is not None else {}), **kwargs)
   2812
   2813

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1808                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1809                         RuntimeWarning, stacklevel=2)
-> 1810             return func(ax, *args, **kwargs)
   1811
   1812         inner.__doc__ = _add_data_doc(inner.__doc__,

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, *args, **kwargs)
   1609         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D._alias_map)
   1610
-> 1611         for line in self._get_lines(*args, **kwargs):
   1612             self.add_line(line)
   1613             lines.append(line)

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_base.py in _grab_next_args(self, *args, **kwargs)
    391                 this += args[0],
    392                 args = args[1:]
--> 393             yield from self._plot_args(this, kwargs)
    394
    395

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs)
    368             x, y = index_of(tup[-1])
    369
--> 370         x, y = self._xy_from_xy(x, y)
    371
    372         if self.command == 'plot':

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_base.py in _xy_from_xy(self, x, y)
    230             raise ValueError("x and y must have same first dimension, but "
    231                              "have shapes {} and {}".format(x.shape, y.shape))
--> 232         if x.ndim > 2 or y.ndim > 2:
    233             raise ValueError("x and y can be no greater than 2-D, but have "
    234                              "shapes {} and {}".format(x.shape, y.shape))

AttributeError: 'Tensor' object has no attribute 'ndim'

In [109]: plt.plot(np.arange(len(sens.numpy())), sens.numpy())
Out[109]: [<matplotlib.lines.Line2D at 0x12df4d1d0>]

In [110]: plt.savefig('logs/sens-256-c100.pdf', format='pdf')

In [111]: len([x for x in sens if x < 1])
Out[111]: 2577761

In [112]: sens2 = sens / sens.min()

In [113]: sens2.max()
Out[113]: tensor(nan)

In [114]: sens2.mean()
Out[114]: tensor(nan)

In [115]: sens2 = sens / (sens.min() + 0.001)

In [116]: sens2.min()
Out[116]: tensor(0.)

In [117]: sens2.max()
Out[117]: tensor(99999.9922)

In [118]: plt.close(fig)

In [119]: plt.close()

In [120]: sens[sens > 10] = 10

In [121]: plt.plot(np.arange(len(sens.numpy())), sens.numpy())
Out[121]: [<matplotlib.lines.Line2D at 0x12dc1e668>]

In [122]: plt.savefig('logs/sens-256-c10.pdf', format='pdf')

In [123]: plt.close()

In [124]: sens2 = sens.sort()

In [125]: sens2
Out[125]:
(tensor([ 0.,  0.,  0.,  ..., 10., 10., 10.]),
 tensor([ 858976,  858974,  858982,  ..., 2705911, 2705912, 2865807]))

In [126]: with open('logs/ga_mscoco_fc_caption_37717/models/offspring/sens_t0_p0.txt', 'rb') as f:
     ...:    sens = torch.load(f)
     ...:

In [127]: sens2, _  = sens.sort()

In [128]: sens2
Out[128]:
tensor([   0.0000,    0.0000,    0.0000,  ..., 2806.1978, 3221.0061,
        3221.0061])

In [129]: plt.plot(np.arange(len(sens2.numpy())), sens2.numpy())
Out[129]: [<matplotlib.lines.Line2D at 0x15711c198>]

In [130]: plt.savefig('logs/sens-256-sorted.png', format='png')

In [131]: plt.savefig('logs/sens-256-sorted.pdf', format='pdf')

In [132]: sens3 = sens.copy()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-132-d8abb9e271ce> in <module>
----> 1 sens3 = sens.copy()

AttributeError: 'Tensor' object has no attribute 'copy'

In [133]: sens3 = torch.zeros_like(sens).copy_(sens)

In [134]: sens
Out[134]: tensor([ 1.3574,  3.2960,  1.9775,  ..., 92.7390, 71.9527, 91.7133])

In [135]: sens3
Out[135]: tensor([ 1.3574,  3.2960,  1.9775,  ..., 92.7390, 71.9527, 91.7133])

In [136]: sens3[sens3 > 100] = 100

In [137]: plt.close()

In [138]: sens4 = sens3.sort()

In [139]: sens3
Out[139]: tensor([ 1.3574,  3.2960,  1.9775,  ..., 92.7390, 71.9527, 91.7133])

In [140]: sens4
Out[140]:
(tensor([  0.,   0.,   0.,  ..., 100., 100., 100.]),
 tensor([ 858976,  858974,  858982,  ..., 1281320, 1281319, 2864596]))

In [141]: sens4 = sens4[0]

In [142]: plt.plot(np.arange(len(sens4.numpy())), sens4.numpy())
Out[142]: [<matplotlib.lines.Line2D at 0x15718a470>]

In [143]: plt.savefig('logs/sens-256-sorted-c100.pdf', format='pdf')

In [144]: plt.savefig('logs/sens-256-sorted-c100.png', format='png')

In [145]: sens5 = torch.zeros_like(sens4).copy_(sens)

In [146]: sens5[sens5 > 20] = 20

In [147]: plt.close()

In [148]: plt.plot(np.arange(len(sens5.numpy())), sens5.numpy())
Out[148]: [<matplotlib.lines.Line2D at 0x1572118d0>]

In [149]: plt.savefig('logs/sens-256-sorted-c20.png', format='png')

In [150]: sens5 = sens5.sort()

In [151]: plt.close()

In [152]: plt.plot(np.arange(len(sens5.numpy())), sens5.numpy())
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-152-4d19d39adc6a> in <module>
----> 1 plt.plot(np.arange(len(sens5.numpy())), sens5.numpy())

AttributeError: 'tuple' object has no attribute 'numpy'

In [153]: sens5 = sens5[0]

In [154]: plt.plot(np.arange(len(sens5.numpy())), sens5.numpy())
Out[154]: [<matplotlib.lines.Line2D at 0x11dff1278>]

In [155]: plt.savefig('logs/sens-256-sorted-c20.png', format='png')

In [156]: senses = torch.zeros(325, len(sens))

In [157]: len(sens)
Out[157]: 2865808

In [158]: for i in range(325):
     ...:     with open('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=i), 'rb') as f:
     ...:         sens[i] = torch.load(f)
     ...:
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-158-e677774ae2a3> in <module>
      1 for i in range(325):
      2     with open('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=i), 'rb') as f:
----> 3         sens[i] = torch.load(f)
      4

RuntimeError: expand(torch.FloatTensor{[2865808]}, size=[]): the number of sizes provided (0) must be greater or equal to the number of dimensions in the tensor (1)

In [159]: print('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=1))
logs/ga_mscoco_fc_caption_37717/models/sens_t1_p0.txt

In [160]: for i in range(325):
     ...:     with open('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=i), 'rb') as f:
     ...:         sens[i, :] = torch.load(f)
     ...:
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-160-ceab7760e657> in <module>
      1 for i in range(325):
      2     with open('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=i), 'rb') as f:
----> 3         sens[i, :] = torch.load(f)
      4

IndexError: too many indices for tensor of dimension 1

In [161]: for i in range(325):
     ...:     with open('logs/ga_mscoco_fc_caption_37717/models/sens_t{i}_p0.txt'.format(i=i), 'rb') as f:
     ...:         senses[i] = torch.load(f)
     ...:

In [162]: senses
Out[162]:
tensor([[  1.3574,   3.2960,   1.9775,  ...,  92.7390,  71.9527,  91.7133],
        [  0.5315,   2.0116,   1.2472,  ...,  69.4936,  87.6286,  29.7085],
        [  1.3241,   2.9066,   0.8466,  ..., 105.7175,  83.8683,  66.5057],
        ...,
        [  1.2108,   1.7250,   0.7563,  ..., 102.5971,  85.7569,  54.5475],
        [  0.6062,   2.2397,   0.7938,  ..., 141.0138,  82.4447,  89.4855],
        [  0.8495,   1.9054,   1.5641,  ..., 100.0578,  80.9283,  67.6594]])

In [163]: senses.size()
Out[163]: torch.Size([325, 2865808])

In [164]: a = torch.Tensor([[1, 2], [3, 4]])

In [165]: a.sum(1)
Out[165]: tensor([3., 7.])

In [166]: a
Out[166]:
tensor([[1., 2.],
        [3., 4.]])

In [167]: a.sum(0)
Out[167]: tensor([4., 6.])

In [168]: a
Out[168]:
tensor([[1., 2.],
        [3., 4.]])

In [169]: senses.sum(0).size()
Out[169]: torch.Size([2865808])

In [170]: entire_senses = senses.sum(0) / 325

In [171]: entire_senses.max()
Out[171]: tensor(3038.2812)

In [172]: entire_senses.min()
Out[172]: tensor(0.)

In [173]: entire_senses.mean()
Out[173]: tensor(0.8563)

In [174]: senses[0].mean()
Out[174]: tensor(0.8553)

In [175]: plt.close()

In [176]: plt.plot(np.arange(len(entire_senses.numpy())), entire_senses.numpy())
Out[176]: [<matplotlib.lines.Line2D at 0x13518a588>]

In [177]: plt.savefig('logs/sens-all.png', format='png')

In [178]: cr_es_100 = torch.zeros_like(entire_senses).copy_(entire_senses)

In [179]: cr_es_100[cr_es_100 > 100] = 100

In [180]: plt.close()

In [181]: plt.plot(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy())
Out[181]: [<matplotlib.lines.Line2D at 0x140cf81d0>]

In [182]: plt.savefig('logs/sens-all-c100.png', format='png')

In [183]:

In [183]: senses_256 = senses[0].copy()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-183-2ceb4ffde526> in <module>
----> 1 senses_256 = senses[0].copy()

AttributeError: 'Tensor' object has no attribute 'copy'

In [184]: senses_256 = torch.zeros_like(senses[0]).copy_(senses[0])

In [185]: senses_256_c100 = torch.zeros_like(senses[0]).copy_(senses[0])

In [186]: senses_256_c100[senses_256_c100 > 100] = 100

In [187]: plt.close()

In [188]: plt.plot(np.arange(len(senses_256.numpy())), senses_256.numpy())
Out[188]: [<matplotlib.lines.Line2D at 0x163b95320>]

In [189]: plt.savefig('logs/sens-256.png', format='png')

In [190]: plt.close()

In [191]: plt.plot(np.arange(len(senses_256_c100.numpy())), senses_256_c100.numpy())
Out[191]: [<matplotlib.lines.Line2D at 0x157240a58>]

In [192]: plt.savefig('logs/sens-256-c100.png', format='png')

In [193]: senses.mean(0)
Out[193]: tensor([  0.9233,   1.9824,   1.0914,  ..., 107.0407,  77.2430,  71.2686])

In [194]: senses.mean(0).size()
Out[194]: torch.Size([2865808])

In [195]: torch.equals(senses.mean(0), entire_senses)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-195-a7edbcbf58dc> in <module>
----> 1 torch.equals(senses.mean(0), entire_senses)

AttributeError: module 'torch' has no attribute 'equals'

In [196]: torch.equal(senses.mean(0), entire_senses)
Out[196]: True

In [197]: senses_256_c100_sorted, _  = senses_256_c100.sort()

In [198]: plt.close()

In [199]: plt.plot(np.arange(len(senses_256_c100_sorted.numpy())), senses_256_c100_sorted.numpy())
Out[199]: [<matplotlib.lines.Line2D at 0x1638bea20>]

In [200]: entire_senses_sorted, _ = entire_senses.sort()

In [201]: plt.plot(np.arange(len(entire_senses_sorted.numpy())), entire_senses_sorted.numpy())
Out[201]: [<matplotlib.lines.Line2D at 0x1638955c0>]

In [202]: plt.savefig('logs/entire-vs-256-sorted.png', format='png')

In [203]: plt.close()

In [204]: cr_es_100_srtd, _ = cr_es_100.sort()

In [205]: plt.plot(np.arange(len(senses_256_c100_sorted.numpy())), senses_256_c100_sorted.numpy())
Out[205]: [<matplotlib.lines.Line2D at 0x14ea4b1d0>]

In [206]: plt.plot(np.arange(len(cr_es_100_srtd.numpy())), cr_es_100_srtd.numpy())
Out[206]: [<matplotlib.lines.Line2D at 0x163ab5710>]

In [207]: plt.close()

In [208]: plt.plot(np.arange(len(senses_256_c100_sorted.numpy())), senses_256_c100_sorted.numpy())
Out[208]: [<matplotlib.lines.Line2D at 0x1637a87f0>]

In [209]: plt.plot(np.arange(len(cr_es_100_srtd.numpy())), cr_es_100_srtd.numpy())
Out[209]: [<matplotlib.lines.Line2D at 0x163895c88>]

In [210]: plt.savefig('logs/entire-vs-256-sorted.png', format='png')

In [211]: plt.close()

In [212]: plt.plot(np.arange(len(senses_256_c100_sorted.numpy())), senses_256_c100_sorted.numpy())
Out[212]: [<matplotlib.lines.Line2D at 0x163906e10>]

In [213]: plt.plot(np.arange(len(cr_es_100_srtd.numpy())), cr_es_100_srtd.numpy())
Out[213]: [<matplotlib.lines.Line2D at 0x14ea9cc88>]

In [214]: plt.savefig('logs/entire-vs-256-sorted.pdf', format='pdf')

In [215]: plt.close()

In [216]: entire_senses[entire_senses > 1000]
Out[216]:
tensor([3038.2812, 1236.5773, 1573.8679, 1162.8733, 1200.0632, 1235.8092,
        1666.2841, 1169.4948, 2689.7461, 1458.5364, 3038.2812])

In [217]: entire_senses[entire_senses > 1000].nonzero()
Out[217]:
tensor([[ 0],
        [ 1],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [ 6],
        [ 7],
        [ 8],
        [ 9],
        [10]])

In [218]: entire_senses.numpy().where(entire_senses > 100)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-218-e5d071c64d21> in <module>
----> 1 entire_senses.numpy().where(entire_senses > 100)

AttributeError: 'numpy.ndarray' object has no attribute 'where'

In [219]: np.where(entire_senses.numpy() > 100)
Out[219]: (array([ 262274,  262277,  262278, ..., 2865803, 2865804, 2865805]),)

In [220]: np.where(entire_senses.numpy() > 1000)
Out[220]:
(array([2782828, 2811409, 2811429, 2811436, 2811439, 2811452, 2811481,
        2811497, 2811500, 2811508, 2865388]),)

In [221]: np.where(entire_senses.numpy() > 500)
Out[221]:
(array([1281295, 2782828, 2783076, 2783084, 2811409, 2811410, 2811412,
        2811413, 2811414, 2811415, 2811416, 2811418, 2811419, 2811421,
        2811422, 2811423, 2811424, 2811425, 2811426, 2811428, 2811429,
        2811430, 2811433, 2811434, 2811436, 2811437, 2811438, 2811439,
        2811440, 2811445, 2811446, 2811448, 2811449, 2811450, 2811451,
        2811452, 2811455, 2811456, 2811458, 2811459, 2811460, 2811461,
        2811462, 2811463, 2811464, 2811465, 2811467, 2811468, 2811469,
        2811472, 2811473, 2811474, 2811475, 2811476, 2811478, 2811480,
        2811481, 2811483, 2811487, 2811490, 2811491, 2811494, 2811497,
        2811498, 2811499, 2811500, 2811501, 2811504, 2811506, 2811507,
        2811508, 2811511, 2811512, 2811513, 2811514, 2811517, 2811518,
        2811519, 2811521, 2811522, 2811524, 2811525, 2811527, 2811528,
        2811529, 2811530, 2811531, 2811532, 2811533, 2843244, 2865388,
        2865636, 2865644]),)

In [222]: np.where(senses[0].numpy() > 500)
Out[222]:
(array([1281295, 1281319, 2728904, 2728922, 2728941, 2782828, 2783076,
        2783084, 2811409, 2811410, 2811412, 2811413, 2811414, 2811415,
        2811416, 2811417, 2811419, 2811420, 2811421, 2811423, 2811424,
        2811425, 2811426, 2811428, 2811429, 2811430, 2811433, 2811434,
        2811435, 2811436, 2811437, 2811439, 2811440, 2811445, 2811446,
        2811447, 2811448, 2811449, 2811450, 2811451, 2811452, 2811455,
        2811456, 2811457, 2811458, 2811459, 2811462, 2811464, 2811467,
        2811468, 2811469, 2811472, 2811473, 2811474, 2811476, 2811477,
        2811478, 2811481, 2811483, 2811487, 2811488, 2811489, 2811490,
        2811491, 2811493, 2811494, 2811496, 2811497, 2811498, 2811499,
        2811500, 2811504, 2811506, 2811508, 2811513, 2811514, 2811517,
        2811519, 2811520, 2811521, 2811522, 2811524, 2811527, 2811528,
        2811529, 2811530, 2811531, 2811532, 2811533, 2811534, 2843244,
        2844268, 2865388, 2865636, 2865644]),)

In [223]: [(x in np.where(senses[0].numpy() > 500)) for x in np.where(entire_senses.numpy() > 500)]
/Users/rubencartuyvels/miniconda3/envs/cp3env/bin/ipython:1: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.
  #!/Users/rubencartuyvels/miniconda3/envs/cp3env/bin/python
Out[223]: [False]

In [224]: [(x in np.where(senses[0].numpy() > 500)[0]) for x in np.where(entire_senses.numpy() > 500)[0]]
Out[224]:
[True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 False,
 True,
 True,
 False,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 False,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 False,
 False,
 True,
 False,
 True,
 False,
 True,
 True,
 True,
 True,
 True,
 True,
 False,
 True,
 True,
 False,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 False,
 True,
 True,
 False,
 True,
 False,
 False,
 True,
 True,
 True,
 False,
 True,
 True,
 True,
 True,
 False,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True,
 True]

In [225]: plt.close()

In [226]: plt.plot(np.arange(len(entire_senses.numpy())), entire_senses.numpy())
Out[226]: [<matplotlib.lines.Line2D at 0x163b72a90>]

In [227]: plt.savefig('logs/sens_all.pdf', format='pdf')

In [228]: plt.close()

In [229]: plt.plot(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy())
Out[229]: [<matplotlib.lines.Line2D at 0x143a43278>]

In [230]: plt.savefig('logs/sens-all-c100.pdf', format='pdf')

In [231]: plt.close()

In [232]: cr_es_100.size()
Out[232]: torch.Size([2865808])

In [233]: cr_es_100.sort()[0].size()
Out[233]: torch.Size([2865808])

In [234]: cr_es_100_srtd.size()
Out[234]: torch.Size([2865808])

In [235]: plt.plot(np.arange(len(cr_es_100_srtd.numpy())), cr_es_100_srtd.numpy())
Out[235]: [<matplotlib.lines.Line2D at 0x163c2bd68>]

In [236]: plt.savefig('logs/sens-all-sorted-c100.pdf', format='pdf')

In [237]: plt.savefig('logs/sens-all-sorted-c100.png', format='png')

In [238]: plt.close()

In [239]: plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy())
Out[239]: <matplotlib.collections.PathCollection at 0x1361c4dd8>

In [240]: plt.savefig('logs/sens-all-c100-sc.png', format='png')

In [241]: plt.close()

In [242]: plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), marker_size=0.01)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-242-6ddf7f5d976f> in <module>
----> 1 plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), marker_size=0.01)

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/pyplot.py in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, data, **kwargs)
   2860         vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths,
   2861         verts=verts, edgecolors=edgecolors, **({"data": data} if data
-> 2862         is not None else {}), **kwargs)
   2863     sci(__ret)
   2864     return __ret

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1808                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1809                         RuntimeWarning, stacklevel=2)
-> 1810             return func(ax, *args, **kwargs)
   1811
   1812         inner.__doc__ = _add_data_doc(inner.__doc__,

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_axes.py in scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, **kwargs)
   4298                 )
   4299         collection.set_transform(mtransforms.IdentityTransform())
-> 4300         collection.update(kwargs)
   4301
   4302         if colors is None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in update(self, props)
    914
    915         with cbook._setattr_cm(self, eventson=False):
--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]
    917
    918         if len(ret):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in <listcomp>(.0)
    914
    915         with cbook._setattr_cm(self, eventson=False):
--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]
    917
    918         if len(ret):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in _update_property(self, k, v)
    910                 func = getattr(self, 'set_' + k, None)
    911                 if not callable(func):
--> 912                     raise AttributeError('Unknown property %s' % k)
    913                 return func(v)
    914

AttributeError: Unknown property marker_size

In [243]: plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), markersize=0.01)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-243-a0d9be3ce260> in <module>
----> 1 plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), markersize=0.01)

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/pyplot.py in scatter(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, data, **kwargs)
   2860         vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths,
   2861         verts=verts, edgecolors=edgecolors, **({"data": data} if data
-> 2862         is not None else {}), **kwargs)
   2863     sci(__ret)
   2864     return __ret

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1808                         "the Matplotlib list!)" % (label_namer, func.__name__),
   1809                         RuntimeWarning, stacklevel=2)
-> 1810             return func(ax, *args, **kwargs)
   1811
   1812         inner.__doc__ = _add_data_doc(inner.__doc__,

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_axes.py in scatter(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, **kwargs)
   4298                 )
   4299         collection.set_transform(mtransforms.IdentityTransform())
-> 4300         collection.update(kwargs)
   4301
   4302         if colors is None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in update(self, props)
    914
    915         with cbook._setattr_cm(self, eventson=False):
--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]
    917
    918         if len(ret):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in <listcomp>(.0)
    914
    915         with cbook._setattr_cm(self, eventson=False):
--> 916             ret = [_update_property(self, k, v) for k, v in props.items()]
    917
    918         if len(ret):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in _update_property(self, k, v)
    910                 func = getattr(self, 'set_' + k, None)
    911                 if not callable(func):
--> 912                     raise AttributeError('Unknown property %s' % k)
    913                 return func(v)
    914

AttributeError: Unknown property markersize

In [244]: plt.plot(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), markersize=0.01)
Out[244]: [<matplotlib.lines.Line2D at 0x13522f128>]

In [245]: plt.savefig('logs/sens-all-c100-sc.png', format='png')

In [246]: plt.savefig('logs/sens-all-c100-sc-2.png', format='png')

In [247]: plt.close()

In [248]: plt.scatter(np.arange(len(cr_es_100.numpy())), cr_es_100.numpy(), s=0.01)
Out[248]: <matplotlib.collections.PathCollection at 0x1351ab940>

In [249]: plt.savefig('logs/sens-all-c100-sc-3.png', format='png')

In [250]: plt.savefig('logs/sens-all-c100-sc-3.pdf', format='pdf')


^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-250-514c5e51d9e1> in <module>
----> 1 plt.savefig('logs/sens-all-c100-sc-3.pdf', format='pdf')

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/pyplot.py in savefig(*args, **kwargs)
    687 def savefig(*args, **kwargs):
    688     fig = gcf()
--> 689     res = fig.savefig(*args, **kwargs)
    690     fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
    691     return res

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/figure.py in savefig(self, fname, frameon, transparent, **kwargs)
   2092             self.set_frameon(frameon)
   2093
-> 2094         self.canvas.print_figure(fname, **kwargs)
   2095
   2096         if frameon:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)
   2073                     orientation=orientation,
   2074                     bbox_inches_restore=_bbox_inches_restore,
-> 2075                     **kwargs)
   2076             finally:
   2077                 if bbox_inches and restore_bbox:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in print_pdf(self, filename, dpi, bbox_inches_restore, metadata, **kwargs)
   2563                 RendererPdf(file, dpi, height, width),
   2564                 bbox_inches_restore=bbox_inches_restore)
-> 2565             self.figure.draw(renderer)
   2566             renderer.finalize()
   2567             if not isinstance(filename, PdfPages):

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     48                 renderer.start_filter()
     49
---> 50             return draw(artist, renderer, *args, **kwargs)
     51         finally:
     52             if artist.get_agg_filter() is not None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/figure.py in draw(self, renderer)
   1647
   1648             mimage._draw_list_compositing_images(
-> 1649                 renderer, self, artists, self.suppressComposite)
   1650
   1651             renderer.close_group('figure')

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    136     if not_composite or not has_images:
    137         for a in artists:
--> 138             a.draw(renderer)
    139     else:
    140         # Composite any adjacent images together

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     48                 renderer.start_filter()
     49
---> 50             return draw(artist, renderer, *args, **kwargs)
     51         finally:
     52             if artist.get_agg_filter() is not None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/axes/_base.py in draw(self, renderer, inframe)
   2626             renderer.stop_rasterizing()
   2627
-> 2628         mimage._draw_list_compositing_images(renderer, self, artists)
   2629
   2630         renderer.close_group('axes')

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    136     if not_composite or not has_images:
    137         for a in artists:
--> 138             a.draw(renderer)
    139     else:
    140         # Composite any adjacent images together

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     48                 renderer.start_filter()
     49
---> 50             return draw(artist, renderer, *args, **kwargs)
     51         finally:
     52             if artist.get_agg_filter() is not None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/collections.py in draw(self, renderer)
    881     def draw(self, renderer):
    882         self.set_sizes(self._sizes, self.figure.dpi)
--> 883         Collection.draw(self, renderer)
    884
    885

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     48                 renderer.start_filter()
     49
---> 50             return draw(artist, renderer, *args, **kwargs)
     51         finally:
     52             if artist.get_agg_filter() is not None:

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/collections.py in draw(self, renderer)
    322             renderer.draw_markers(
    323                 gc, paths[0], combined_transform.frozen(),
--> 324                 mpath.Path(offsets), transOffset, tuple(facecolors[0]))
    325         else:
    326             renderer.draw_path_collection(

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in draw_markers(self, gc, marker_path, marker_trans, path, trans, rgbFace)
   1794                 dx, dy = x - lastx, y - lasty
   1795                 output(1, 0, 0, 1, dx, dy, Op.concat_matrix,
-> 1796                        marker, Op.use_xobject)
   1797                 lastx, lasty = x, y
   1798         output(Op.grestore)

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in output(self, *data)
    616
    617     def output(self, *data):
--> 618         self.write(fill([pdfRepr(x) for x in data]))
    619         self.write(b'\n')
    620

~/miniconda3/envs/cp3env/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py in write(self, data)
    613             self.fh.write(data)
    614         else:
--> 615             self.currentstream.write(data)
    616
    617     def output(self, *data):

KeyboardInterrupt:

In [251]: plt.savefig('logs/sens-all-c100-sc-3.pdf', format='pdf')

In [252]: plt.close()

In [253]: torch.save(entire_senses, 'logs/sens_entire_trainset.pth')

In [254]: entire_senses.min()
Out[254]: tensor(0.)

In [255]: breakpoints
Out[255]: [262144, 128, 1214464, 1214464, 9488, 81920, 640, 81920, 640]

In [256]: def slice_mean(lst, start, nb):
     ...:     [1]    40880 terminated  ipython
(cp3env)  ✘ rubencartuyvels  ~/Documents/bir-18-19/thesis/ga-img-captioning   better-safe-mutations ●  ipython
Python 3.7.2 (default, Dec 29 2018, 00:00:04)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.
Warning: disable autoreload in ipython_config.py to improve performance.

In [1]: import torch

In [2]: es = torch.load('logs/sens_entire_trainset.pth')

In [3]: len(es)
Out[3]: 2865808

In [4]: es.size()
Out[4]: torch.Size([2865808])

In [5]: es.min()
Out[5]: tensor(0.)

In [6]: breakpoints = [262144, 128, 1214464, 1214464, 9488, 81920, 640, 81920, 640]

In [7]: def slice_mean(lst, start, nb):
   ...:     return lst[start:start+nb].mean()
   ...:

In [8]: zoned_es = torch.zeros_like(es)

In [9]: count = 0

In [10]: for i in breakpoints:
    ...:     slc = es[count:count+i]
    ...:     slc[slc < slc.mean()] = slc.mean()
    ...:     zoned_es[count:count+i] = slc
    ...:     count += i
    ...:

In [11]: zoned_es
Out[11]: tensor([  1.3687,   1.9824,   1.3687,  ..., 107.0407,  77.2430,  71.2686])

In [12]: from matplotlib import pyplot as plt

In [13]: plt.plot(np.arange(len(zoned_es.numpy())), zoned_es.numpy())
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-13-6fa524abc8fa> in <module>
----> 1 plt.plot(np.arange(len(zoned_es.numpy())), zoned_es.numpy())

NameError: name 'np' is not defined

In [14]: import numpy as np

In [15]: plt.plot(np.arange(len(zoned_es.numpy())), zoned_es.numpy())
Out[15]: [<matplotlib.lines.Line2D at 0x1202c8a58>]

In [16]: plt.savefig('logs/sens-all-zoned.png', format='png')

In [17]: plt.close()

In [18]: plt.plot(np.arange(len(zoned_es.clamp(100))), zoned_es.clamp(100).numpy())
Out[18]: [<matplotlib.lines.Line2D at 0x12ede9be0>]

In [19]: plt.savefig('logs/sens-all-zoned-c100.png', format='png')

In [20]: plt.close()

In [21]: plt.plot(np.arange(len(zoned_es.clamp(0, 100))), zoned_es.clamp(0, 100).numpy())
Out[21]: [<matplotlib.lines.Line2D at 0x12ed0f7f0>]

In [22]: plt.savefig('logs/sens-all-zoned-c100.png', format='png')

In [23]: torch.save(zoned_es, 'logs/sens_entire_zoned_mean.pth')

In [24]: zoned_es_max = torch.zeros_like(es)

In [25]: count = 0

In [26]: for i in breakpoints:
    ...:     slc = es[count:count+i]
    ...:     slc[slc < slc.mean()] = slc.max()
    ...:     zoned_es_max[count:count+i] = slc
    ...:     count += i
    ...:

In [27]: zoned_es_max
Out[27]:
tensor([2.0729e+01, 1.9824e+00, 2.0729e+01,  ..., 1.0704e+02, 3.0383e+03,
        3.0383e+03])

In [28]: for i in breakpoints:
    ...:     slc = es[count:count+i]
    ...:     # slc[slc < slc.mean()] = slc.max()
    ...:     zoned_es_max[count:count+i] = slc.max()
    ...:     count += i
    ...:
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
<ipython-input-28-9e18b3437b67> in <module>
      2     slc = es[count:count+i]
      3     # slc[slc < slc.mean()] = slc.max()
----> 4     zoned_es_max[count:count+i] = slc.max()
      5     count += i
      6

RuntimeError: invalid argument 1: tensor must have one dimension at /Users/soumith/mc3build/conda-bld/pytorch_1549597882250/work/aten/src/TH/generic/THTensorEvenMoreMath.cpp:590

In [29]: count = 0
    ...: for i in breakpoints:
    ...:     slc = es[count:count+i]
    ...:     # slc[slc < slc.mean()] = slc.max()
    ...:     zoned_es_max[count:count+i] = slc.max()
    ...:     count += i
    ...:

In [30]: zoned_es_max
Out[30]:
tensor([  20.7289,   20.7289,   20.7289,  ..., 3038.2812, 3038.2812,
        3038.2812])

In [31]: zoned_es_max.min()
Out[31]: tensor(5.8994)

In [32]: zoned_es.min()
Out[32]: tensor(0.1264)

In [33]: es.min()
Out[33]: tensor(0.2487)

In [34]: plt.close()

In [35]: plt.plot(np.arange(len(zoned_es.clamp(0, 100))), zoned_es.clamp(0, 100).numpy())
Out[35]: [<matplotlib.lines.Line2D at 0x12ee89898>]

In [36]: plt.savefig('logs/sens-all-zoned-c100.pdf', format='pdf')

In [37]: plt.close()

In [38]: es = torch.load('logs/sens_entire_trainset.pth')

In [39]: zoned_es_max = torch.zeros_like(es)

In [40]: count = 0
    ...: for i in breakpoints:
    ...:     slc = torch.empty().copy_(es[count:count+i])
    ...:     # slc[slc < slc.mean()] = slc.max()
    ...:     zoned_es_max[count:count+i] = slc.max()
    ...:     count += i
    ...:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-40-09db260c8fcb> in <module>
      1 count = 0
      2 for i in breakpoints:
----> 3     slc = torch.empty().copy_(es[count:count+i])
      4     # slc[slc < slc.mean()] = slc.max()
      5     zoned_es_max[count:count+i] = slc.max()

TypeError: empty() missing 1 required positional arguments: "size"

In [41]: count = 0
    ...: for i in breakpoints:
    ...:     slc = torch.empty((1, i)).copy_(es[count:count+i])
    ...:     # slc[slc < slc.mean()] = slc.max()
    ...:     zoned_es_max[count:count+i] = slc.max()
    ...:     count += i
    ...:

In [42]: zoned_es_max
Out[42]:
tensor([  20.7289,   20.7289,   20.7289,  ..., 3038.2812, 3038.2812,
        3038.2812])

In [43]: plt.plot(np.arange(len(zoned_es_max)), zoned_es_max.numpy())
Out[43]: [<matplotlib.lines.Line2D at 0x12eb0b320>]

In [44]: plt.savefig('logs/sens-all-zoned-max-c100.png', format='png')

In [45]: plt.savefig('logs/sens-all-zoned-max-c100.pdf', format='pdf')

In [46]: plt.close()

In [47]: torch.save(zoned_es_max, 'logs/sens_entire_zoned_max.pth')

In [48]: zoned_es_norm = torch.empty_like(zoned_es).copy_(zoned_es)

In [49]: zoned_es_norm.min()
Out[49]: tensor(0.1264)

In [50]: zoned_es_norm /= zoned_es_norm.min()

In [51]: zoned_es_norm.min()
Out[51]: tensor(1.)

In [52]: zoned_es_norm.max()
Out[52]: tensor(24030.1504)

In [53]: torch.save(zoned_es_norm, 'logs/sens_entire_zoned_mean_norm.pth')

In [54]: zoned_es_norm_max = torch.empty_like(zoned_es_max).copy_(zoned_es_max)

In [55]: zoned_es_norm_max.min()
Out[55]: tensor(5.8994)

In [56]: zoned_es_norm_max.max()
Out[56]: tensor(3038.2812)

In [57]: zoned_es_norm_max /= zoned_es_norm_max.min()

In [58]: zoned_es_norm_max.min()
Out[58]: tensor(1.)

In [59]: zoned_es_norm_max.max()
Out[59]: tensor(515.0170)

In [60]: torch.save(zoned_es_norm_max, 'logs/sens_entire_zoned_max_norm.pth')

In [61]: [1]    49311 terminated  ipython